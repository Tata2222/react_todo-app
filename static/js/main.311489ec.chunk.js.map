{"version":3,"sources":["components/Todo.js","components/TodoList.js","components/Header.js","components/Footer.js","App.js","index.js"],"names":["Todo","id","title","completed","changeTodoStatus","deleteTodo","changeTodoValue","useState","isEdit","showTodoInput","editedTitle","changeInputValue","isError","showErrorClass","ref","useRef","handleClickOutside","e","current","contains","target","value","trim","changedTodoId","length","useEffect","focus","document","addEventListener","removeEventListener","className","classNames","editing","type","checked","onClick","htmlFor","onDoubleClick","error","autoComplete","onChange","onKeyDown","key","newTitle","TodoList","todos","map","todo","Header","initialInputValue","handleInputValue","addTodo","placeholder","onKeyPress","Footer","chooseTypeTodos","deleteCompletedTodos","selectedTodos","isVisibleFooter","Boolean","isVisibleButton","filter","covert","href","selected","charAt","toUpperCase","slice","hidden","todosData","JSON","parse","localStorage","getItem","App","state","newTodo","Date","setState","toggleAllTodosStatus","isCompleted","some","typeOfTodos","setTypeTodos","setItem","stringify","this","isAllChecked","every","item","React","Component","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.311489ec.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nconst Todo = ({\n  id,\n  title,\n  completed,\n  changeTodoStatus,\n  deleteTodo,\n  changeTodoValue,\n}) => {\n  const [isEdit, showTodoInput] = useState(false);\n  const [editedTitle, changeInputValue] = useState(title);\n  const [isError, showErrorClass] = useState(false);\n  const ref = useRef();\n\n  const handleInputValue = (e) => {\n    const changedTodoId = +e.target.id;\n\n    if (e.key === 'Escape') {\n      showTodoInput(false);\n      showErrorClass(false);\n\n      return;\n    }\n\n    if (e.key === 'Enter') {\n      const newTitle = editedTitle.trim();\n\n      if (newTitle.length < 2 || newTitle.length > 30) {\n        showErrorClass(true);\n\n        return;\n      }\n\n      changeTodoValue(changedTodoId, newTitle);\n      showTodoInput(false);\n      showErrorClass(false);\n    }\n  };\n\n  const handleClickOutside = (e) => {\n    if (ref.current.contains(e.target)) {\n      return;\n    }\n\n    const value = ref.current.value.trim();\n    const changedTodoId = +ref.current.id;\n\n    if (value.length) {\n      if (value.length < 2 || value.length > 30) {\n        showErrorClass(true);\n\n        return;\n      }\n\n      changeTodoValue(changedTodoId, value);\n    }\n\n    showTodoInput(false);\n    showErrorClass(false);\n  };\n\n  useEffect(() => {\n    if (isEdit) {\n      ref.current.focus();\n    }\n  }, [isEdit]);\n\n  useEffect(() => {\n    document.addEventListener('click', handleClickOutside, true);\n\n    return () => {\n      document.removeEventListener('click', handleClickOutside, true);\n    };\n  });\n\n  return (\n    <li className={classNames({\n      editing: isEdit, completed,\n    })}\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          id={id}\n          checked={completed}\n          onClick={() => changeTodoStatus(id)}\n        />\n        <label\n          htmlFor={id}\n          onDoubleClick={() => showTodoInput(true)}\n        >\n          {title}\n        </label>\n        <button\n          type=\"button\"\n          id={id}\n          className=\"destroy\"\n          onClick={() => deleteTodo(id)}\n        />\n      </div>\n      <input\n        type=\"text\"\n        className={classNames('edit', { error: isError })}\n        ref={ref}\n        id={id}\n        value={editedTitle}\n        autoComplete=\"off\"\n        onChange={e => changeInputValue(e.target.value)}\n        onKeyDown={handleInputValue}\n      />\n    </li>\n  );\n};\n\nTodo.propTypes = {\n  id: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  completed: PropTypes.bool.isRequired,\n  changeTodoStatus: PropTypes.func.isRequired,\n  changeTodoValue: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n};\n\nexport default Todo;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Todo from './Todo';\n\nconst TodoList = ({ todos, changeTodoStatus, deleteTodo, changeTodoValue }) => (\n  <>\n    <ul className=\"todo-list\">\n      {todos.map(todo => (\n        <Todo\n          {...todo}\n          key={todo.id}\n          changeTodoStatus={changeTodoStatus}\n          deleteTodo={deleteTodo}\n          changeTodoValue={changeTodoValue}\n        />\n      ))}\n    </ul>\n  </>\n);\n\nTodoList.propTypes = {\n  changeTodoStatus: PropTypes.func.isRequired,\n  todos: PropTypes.arrayOf.isRequired,\n  changeTodoValue: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n};\n\nexport default TodoList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Header = ({ initialInputValue, handleInputValue, addTodo }) => (\n  <header className=\"header\">\n    <h1>todos</h1>\n\n    <input\n      className=\"new-todo\"\n      placeholder=\"What needs to be done?\"\n      value={initialInputValue}\n      onChange={handleInputValue}\n      onKeyPress={addTodo}\n    />\n  </header>\n);\n\nHeader.propTypes = {\n  addTodo: PropTypes.func.isRequired,\n  handleInputValue: PropTypes.func.isRequired,\n  initialInputValue: PropTypes.string.isRequired,\n};\n\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nconst Footer = ({\n  todos,\n  chooseTypeTodos,\n  deleteCompletedTodos,\n  selectedTodos,\n}) => {\n  const isVisibleFooter = Boolean(todos.length);\n  const isVisibleButton = Boolean(todos.filter(todo => todo.completed).length);\n  const todosFilters = ['all', 'active', 'completed'];\n\n  return (\n    <footer className={classNames('footer', { covert: !isVisibleFooter })}>\n      <span className=\"todo-count\">\n        {todos\n          .filter(todo => !todo.completed)\n          .length\n        }\n        {' '}\n        items left\n      </span>\n\n      <ul className=\"filters\">\n        {todosFilters.map(filter => (\n          <li key={filter}>\n            <a\n              href={`#/${filter}`}\n              title={filter}\n              className={classNames({ selected: filter === selectedTodos })}\n              onClick={chooseTypeTodos}\n            >\n              {filter.charAt(0).toUpperCase() + filter.slice(1)}\n            </a>\n          </li>\n        ))}\n      </ul>\n\n      <button\n        type=\"button\"\n        className=\"clear-completed\"\n        onClick={deleteCompletedTodos}\n        hidden={!isVisibleButton}\n      >\n        Clear completed\n      </button>\n    </footer>\n  );\n};\n\nFooter.propTypes = {\n  chooseTypeTodos: PropTypes.func.isRequired,\n  deleteCompletedTodos: PropTypes.func.isRequired,\n  todos: PropTypes.arrayOf.isRequired,\n  selectedTodos: PropTypes.string.isRequired,\n};\n\nexport default Footer;\n","import React from 'react';\nimport TodoList from './components/TodoList';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\n\nconst todosData = JSON.parse(localStorage.getItem('todosData')) || [];\n\nclass App extends React.Component {\n  state={\n    todos: [...todosData],\n    initialInputValue: '',\n    selectedTodos: 'all',\n  }\n\n  componentDidUpdate() {\n    localStorage.setItem('todosData', JSON.stringify([...this.state.todos]));\n  }\n\n  addTodo = (e) => {\n    if (e.key !== 'Enter') {\n      return;\n    }\n\n    const newTodo = this.state.initialInputValue.trim();\n\n    if (newTodo) {\n      const todo = {\n        id: +new Date(),\n        title: newTodo,\n        completed: false,\n      };\n\n      this.setState(state => ({\n        todos: [...state.todos, todo],\n        initialInputValue: '',\n      }));\n    }\n  }\n\n  deleteTodo = (id) => {\n    this.setState(state => ({\n      todos: [...state.todos].filter(todo => todo.id !== id),\n    }));\n  }\n\n  deleteCompletedTodos = () => {\n    this.setState(state => ({\n      todos: [...state.todos]\n        .filter(todo => !todo.completed),\n    }));\n  }\n\n  changeTodoStatus = (id) => {\n    this.setState(state => ({\n      todos: state.todos.map(todo => (\n        (todo.id === id)\n          ? {\n            ...todo, completed: !todo.completed,\n          }\n          : todo\n      )),\n    }));\n  }\n\n  toggleAllTodosStatus = ({ target }) => {\n    const isCompleted = this.state.todos.some(todo => !todo.completed);\n\n    this.setState(state => ({\n      todos: state.todos.map(todo => ({\n        ...todo,\n        completed: isCompleted,\n      })),\n    }));\n  }\n\n  changeTodoValue = (id, newTitle) => {\n    this.setState(state => ({\n      todos: state.todos.map(todo => (\n        todo.id === id\n          ? {\n            ...todo, title: newTitle,\n          }\n          : todo\n      )),\n    }));\n  }\n\n  handleInputValue = (e) => {\n    const { value } = e.target;\n\n    this.setState({\n      initialInputValue: value,\n    });\n  }\n\n  chooseTypeTodos = (e) => {\n    const typeOfTodos = e.target.title;\n\n    this.setState({\n      selectedTodos: typeOfTodos,\n    });\n  }\n\n  setTypeTodos = (todo) => {\n    const { selectedTodos } = this.state;\n\n    if (selectedTodos === 'active') {\n      return !todo.completed;\n    }\n\n    if (selectedTodos === 'completed') {\n      return todo.completed;\n    }\n\n    return true;\n  }\n\n  render() {\n    const { todos, initialInputValue, selectedTodos } = this.state;\n    const isAllChecked = todos.every(item => item.completed);\n\n    return (\n      <section className=\"todoapp\">\n        <Header\n          initialInputValue={initialInputValue}\n          handleInputValue={this.handleInputValue}\n          addTodo={this.addTodo}\n        />\n\n        <section className=\"main\">\n          {todos.length > 0 && (\n            <>\n              <input\n                type=\"checkbox\"\n                id=\"toggle-all\"\n                className=\"toggle-all\"\n                onClick={this.toggleAllTodosStatus}\n                checked={isAllChecked}\n              />\n              <label htmlFor=\"toggle-all\">Mark all as complete</label>\n            </>\n          )}\n\n          <TodoList\n            todos={todos.filter(this.setTypeTodos)}\n            changeTodoStatus={this.changeTodoStatus}\n            deleteTodo={this.deleteTodo}\n            changeTodoValue={this.changeTodoValue}\n          />\n        </section>\n\n        <Footer\n          todos={todos}\n          selectedTodos={selectedTodos}\n          chooseTypeTodos={this.chooseTypeTodos}\n          deleteCompletedTodos={this.deleteCompletedTodos}\n        />\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}