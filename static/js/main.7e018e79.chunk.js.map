{"version":3,"sources":["components/Todo.js","components/TodoList.js","components/Header.js","App.js","index.js"],"names":["Todo","id","title","completed","changeTodoStatus","deleteTodo","changeTodoValue","useState","isEdit","showTodoInput","editedTitle","changeInputValue","isError","showErrorClass","ref","useRef","handleClickOutside","e","current","contains","target","value","trim","changedTodoId","length","useEffect","document","addEventListener","removeEventListener","className","classNames","editing","type","checked","onClick","htmlFor","onDoubleClick","error","autoComplete","onChange","onKeyDown","key","newTitle","TodoList","todos","map","todo","Header","initialInputValue","handleInputValue","addTodo","placeholder","onKeyPress","todosData","JSON","parse","localStorage","getItem","App","state","newTodoId","isAllTodos","isActiveTodos","isCompletedTodos","newTodo","setState","filter","item","deleteCompletedTodos","newId","task","toggleAllTodosStatus","chooseTypeTodos","setTypeTodos","setItem","stringify","this","href","selected","React","Component","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.7e018e79.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nconst Todo = ({\n  id,\n  title,\n  completed,\n  changeTodoStatus,\n  deleteTodo,\n  changeTodoValue,\n}) => {\n  const [isEdit, showTodoInput] = useState(false);\n  const [editedTitle, changeInputValue] = useState(title);\n  const [isError, showErrorClass] = useState(false);\n  const ref = useRef();\n\n  const handleInputValue = (e) => {\n    const changedTodoId = +e.target.id;\n\n    if (e.key === 'Escape') {\n      showTodoInput(false);\n      showErrorClass(false);\n\n      return;\n    }\n\n    if (e.key === 'Enter') {\n      const newTitle = editedTitle.trim();\n\n      if (newTitle.length < 2 || newTitle.length > 30) {\n        showErrorClass(true);\n\n        return;\n      }\n\n      changeTodoValue(changedTodoId, newTitle);\n      showTodoInput(false);\n      showErrorClass(false);\n    }\n  };\n\n  const handleClickOutside = (e) => {\n    if (ref.current.contains(e.target)) {\n      return;\n    }\n\n    const value = ref.current.value.trim();\n    const changedTodoId = +ref.current.id;\n\n    if (value.length < 2 || value.length > 30) {\n      showErrorClass(true);\n\n      return;\n    }\n\n    changeTodoValue(changedTodoId, value);\n    showTodoInput(false);\n    showErrorClass(false);\n  };\n\n  useEffect(() => {\n    document.addEventListener('click', handleClickOutside, true);\n\n    return () => {\n      document.removeEventListener('click', handleClickOutside, true);\n    };\n  }, []);\n\n  return (\n    <li className={classNames({\n      editing: isEdit, completed,\n    })}\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          id={id}\n          checked={completed}\n          onClick={() => changeTodoStatus(id)}\n        />\n        <label\n          htmlFor={id}\n          onDoubleClick={() => showTodoInput(true)}\n        >\n          {title}\n        </label>\n        <button\n          type=\"button\"\n          id={id}\n          className=\"destroy\"\n          onClick={() => deleteTodo(id)}\n        />\n      </div>\n      <input\n        type=\"text\"\n        className={classNames('edit', { error: isError })}\n        ref={ref}\n        id={id}\n        value={editedTitle}\n        autoComplete=\"off\"\n        onChange={e => changeInputValue(e.target.value)}\n        onKeyDown={handleInputValue}\n      />\n    </li>\n  );\n};\n\nTodo.propTypes = {\n  id: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  completed: PropTypes.bool.isRequired,\n  changeTodoStatus: PropTypes.func.isRequired,\n  changeTodoValue: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n};\n\nexport default Todo;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Todo from './Todo';\n\nconst TodoList = ({ todos, changeTodoStatus, deleteTodo, changeTodoValue }) => (\n  <>\n    <ul className=\"todo-list\">\n      {todos.map(todo => (\n        <Todo\n          {...todo}\n          key={todo.id}\n          changeTodoStatus={changeTodoStatus}\n          deleteTodo={deleteTodo}\n          changeTodoValue={changeTodoValue}\n        />\n      ))}\n    </ul>\n  </>\n);\n\nTodoList.propTypes = {\n  changeTodoStatus: PropTypes.func.isRequired,\n  deleteTask: PropTypes.func.isRequired,\n  todos: PropTypes.arrayOf.isRequired,\n  changeTodoValue: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n};\nexport default TodoList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Header = ({ initialInputValue, handleInputValue, addTodo }) => (\n  <header className=\"header\">\n    <h1>todos</h1>\n\n    <input\n      className=\"new-todo\"\n      placeholder=\"What needs to be done?\"\n      value={initialInputValue}\n      onChange={handleInputValue}\n      onKeyPress={addTodo}\n    />\n  </header>\n);\n\nHeader.propTypes = {\n  addTodo: PropTypes.func.isRequired,\n  handleInputValue: PropTypes.func.isRequired,\n  initialInputValue: PropTypes.string.isRequired,\n};\n\nexport default Header;\n","import React from 'react';\nimport classNames from 'classnames';\nimport TodoList from './components/TodoList';\nimport Header from './components/Header';\n\nconst todosData = JSON.parse(localStorage.getItem('todosData')) || [];\n\nclass App extends React.Component {\n  state={\n    todos: [...todosData],\n    newTodoId: todosData.length + 1 || 1,\n    initialInputValue: '',\n    isAllTodos: true,\n    isActiveTodos: false,\n    isCompletedTodos: false,\n  }\n\n  componentDidUpdate() {\n    localStorage.setItem('todosData', JSON.stringify([...this.state.todos]));\n  }\n\n  addTodo = (e) => {\n    if (e.key !== 'Enter') {\n      return;\n    }\n\n    const newTodo = this.state.initialInputValue.trim();\n    const { newTodoId } = this.state;\n\n    if (newTodo) {\n      const todo = {\n        id: newTodoId,\n        title: newTodo,\n        completed: false,\n      };\n\n      this.setState(state => ({\n        todos: [...state.todos, todo],\n        newTodoId: state.newTodoId + 1,\n        initialInputValue: '',\n      }));\n    }\n  }\n\n  deleteTodo = (id) => {\n    this.setState(state => ({\n      todos: state.todos.filter(todo => todo.id !== id)\n        .map(item => (\n          (item.id > id)\n            ? {\n              ...item, id: item.id - 1,\n            }\n            : item\n        )),\n      newTodoId: state.todos.length,\n    }));\n  }\n\n  deleteCompletedTodos = () => {\n    let newId = 1;\n\n    this.setState(state => ({\n      todos: state.todos\n        .filter(todo => !todo.completed)\n        .map(task => ({\n        // eslint-disable-next-line\n          ...task, id: newId++,\n        })),\n    }));\n\n    this.setState(state => ({\n      newTodoId: state.todos.length + 1,\n    }));\n  }\n\n  changeTodoStatus = (id) => {\n    this.setState(state => ({\n      todos: state.todos.map(todo => (\n        (todo.id === id)\n          ? {\n            ...todo, completed: !todo.completed,\n          }\n          : todo\n      )),\n    }));\n  }\n\n  toggleAllTodosStatus = ({ target }) => {\n    this.setState(state => ({\n      todos: state.todos.map(todo => ({\n        ...todo,\n        completed: target.checked,\n      })),\n    }));\n  }\n\n  changeTodoValue = (id, newTitle) => {\n    this.setState(state => ({\n      todos: state.todos.map(todo => (\n        todo.id === id\n          ? {\n            ...todo, title: newTitle,\n          }\n          : todo\n      )),\n    }));\n  }\n\n  handleInputValue = (e) => {\n    const { value } = e.target;\n\n    this.setState({\n      initialInputValue: value,\n    });\n  }\n\n  chooseTypeTodos = (e) => {\n    const type = e.target.title;\n\n    switch (type) {\n      case 'all': {\n        this.setState({\n          isAllTodos: true,\n          isActiveTodos: false,\n          isCompletedTodos: false,\n        });\n        break;\n      }\n\n      case 'active': {\n        this.setState({\n          isAllTodos: false,\n          isActiveTodos: true,\n          isCompletedTodos: false,\n        });\n        break;\n      }\n\n      case 'completed': {\n        this.setState({\n          isAllTodos: false,\n          isActiveTodos: false,\n          isCompletedTodos: true,\n        });\n        break;\n      }\n\n      default: break;\n    }\n  }\n\n  setTypeTodos = (todo) => {\n    const { isActiveTodos, isCompletedTodos } = this.state;\n\n    if (isActiveTodos) {\n      return !todo.completed;\n    }\n\n    if (isCompletedTodos) {\n      return todo.completed;\n    }\n\n    return true;\n  }\n\n  render() {\n    const { todos, initialInputValue } = this.state;\n    const { isActiveTodos, isCompletedTodos, isAllTodos } = this.state;\n\n    return (\n      <section className=\"todoapp\">\n        <Header\n          initialInputValue={initialInputValue}\n          handleInputValue={this.handleInputValue}\n          addTodo={this.addTodo}\n        />\n\n        <section className=\"main\">\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            onClick={this.toggleAllTodosStatus}\n          />\n          <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n          <TodoList\n            todos={todos.filter(this.setTypeTodos)}\n            changeTodoStatus={this.changeTodoStatus}\n            deleteTodo={this.deleteTodo}\n            changeTodoValue={this.changeTodoValue}\n          />\n        </section>\n\n        <footer className=\"footer\">\n          <span className=\"todo-count\">\n            {todos\n              .filter(todo => !todo.completed)\n              .length\n            }\n            {' '}\n            items left\n          </span>\n\n          <ul className=\"filters\">\n            <li>\n              <a\n                href=\"#/\"\n                title=\"all\"\n                className={classNames({ selected: isAllTodos })}\n                onClick={this.chooseTypeTodos}\n              >\n                All\n              </a>\n            </li>\n\n            <li>\n              <a\n                href=\"#/active\"\n                title=\"active\"\n                className={classNames({ selected: isActiveTodos })}\n                onClick={this.chooseTypeTodos}\n              >\n                Active\n              </a>\n            </li>\n\n            <li>\n              <a\n                href=\"#/completed\"\n                title=\"completed\"\n                className={classNames({ selected: isCompletedTodos })}\n                onClick={this.chooseTypeTodos}\n              >\n                Completed\n              </a>\n            </li>\n          </ul>\n\n          <button\n            type=\"button\"\n            className=\"clear-completed\"\n            onClick={this.deleteCompletedTodos}\n          >\n            Clear completed\n          </button>\n        </footer>\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}